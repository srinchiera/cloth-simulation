#include "geometry.h"
#include <vector>
#include "cvec.h"
#include "particle.h"

class Cloth
{
private:
    float width; // how many particles in width;
    float height; // how many particles in height;
    int numParticles;

    std::vector<Particle> particles; // array of particles
    std::vector<VertexPN> vertices;

/*
   // Gets a particle from the particle array
    Particle* getParticle(int x, int y);
    const Particle* Cloth::getProtectedParticle(int x, int y) const;

    // Draws a triangle of the cloth
    static void drawTriangle(const Particle& p1, const Particle& p2, const Particle& p3, const Vector3f& color);

    // Used to find normals of a triangle
    static Vector3f calculateTriangleCross(const Particle &p1, const Particle &p2, const Particle &p3);

    // Check if the ball is intersecting the cloth
    void ballCollision(const Vector3f &center, const float radius);
*/
public:
    // Constructor
    Cloth(float width, float height);
    Cloth();
/*
    // Draws the entire cloth
    void draw() const;

    // Step the cloth forward in time by the given duration
    void update(float duration);

    // Calculate the spring forces for clothlike behavior
    void calculateForces(const Vector3f &wind_dir, const Vector3f &ball_pos, float ball_radius);
*/
    void updateVertices();

    std::vector<VertexPN> getVertices() {
        return vertices;
    }
};
